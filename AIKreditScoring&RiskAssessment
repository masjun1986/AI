import pandas as pd
import numpy as np

np.random.seed(42)

n = 1000

data = {
    'age': np.random.randint(18, 60, n),
    'income': np.random.randint(2000000, 15000000, n),  # penghasilan bulanan
    'loan_amount': np.random.randint(1000000, 10000000, n),
    'loan_term_months': np.random.choice([6, 12, 24, 36], n),
    'credit_score': np.random.randint(300, 850, n),  # mirip skor FICO
    'num_of_dependents': np.random.randint(0, 4, n),
    'previous_defaults': np.random.binomial(1, 0.2, n),
}

# Label: gagal bayar (default) → 1 = ya, 0 = tidak
labels = []
for i in range(n):
    risk = 0
    if data['income'][i] < 3000000: risk += 1
    if data['loan_amount'][i] > data['income'][i] * 3: risk += 1
    if data['credit_score'][i] < 500: risk += 1
    if data['previous_defaults'][i] == 1: risk += 1
    labels.append(1 if risk >= 2 else 0)

data['default'] = labels
df = pd.DataFrame(data)
print(df.head())

# 2. Preprocessing & Train-Test Split

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

features = ['age', 'income', 'loan_amount', 'loan_term_months',
            'credit_score', 'num_of_dependents', 'previous_defaults']
X = df[features]
y = df['default']

# Normalisasi fitur numerik
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

#3. Model AI – Logistic Regression (versi ringan)
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

model = LogisticRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(classification_report(y_test, y_pred))

#4. Prediksi Nasabah Baru

def predict_risk(input_data):
    input_scaled = scaler.transform([input_data])
    pred = model.predict(input_scaled)[0]
    prob = model.predict_proba(input_scaled)[0][1]
    return "GAGAL BAYAR" if pred == 1 else "LAYAK KREDIT", round(prob, 2)

# Contoh nasabah: [age, income, loan_amount, term, score, dependents, prev_def]
new_applicant = [35, 5000000, 7000000, 24, 580, 2, 0]
status, confidence = predict_risk(new_applicant)
print(f"Status: {status}, Confidence: {confidence}")

