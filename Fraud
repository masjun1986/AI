#1. Generate Dataset Transaksi (1000 Row)
import pandas as pd
import numpy as np
import random

np.random.seed(42)

n = 1000

# Simulasi fitur transaksi
data = {
    'transaction_amount': np.round(np.random.exponential(scale=5000, size=n), 2),
    'transaction_hour': np.random.randint(0, 24, n),
    'customer_age': np.random.randint(18, 70, n),
    'is_foreign_transaction': np.random.choice([0, 1], size=n, p=[0.85, 0.15]),
    'is_high_risk_country': np.random.choice([0, 1], size=n, p=[0.9, 0.1]),
    'used_vpn': np.random.choice([0, 1], size=n, p=[0.95, 0.05]),
    'num_prev_transactions': np.random.randint(1, 100, n),
    'account_balance': np.random.randint(10000, 10000000, n),
}

# Label: 1 = fraud, 0 = normal
# Aturan simulasi kasar: fraud sering terjadi jika transaksi besar, malam hari, dari negara berisiko
labels = []
for i in range(n):
    risk = 0
    if data['transaction_amount'][i] > 8000: risk += 1
    if data['transaction_hour'][i] < 6 or data['transaction_hour'][i] > 22: risk += 1
    if data['is_foreign_transaction'][i] == 1: risk += 1
    if data['is_high_risk_country'][i] == 1: risk += 1
    if data['used_vpn'][i] == 1: risk += 1
    labels.append(1 if risk >= 3 else 0)

data['is_fraud'] = labels

df = pd.DataFrame(data)
print(df.head())

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

features = ['transaction_amount', 'transaction_hour', 'customer_age',
            'is_foreign_transaction', 'is_high_risk_country', 'used_vpn',
            'num_prev_transactions', 'account_balance']

X = df[features]
y = df['is_fraud']

# Normalisasi
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)


from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(classification_report(y_test, y_pred))


def predict_fraud(transaction_data):
    scaled = scaler.transform([transaction_data])
    prediction = model.predict(scaled)[0]
    probability = model.predict_proba(scaled)[0][1]
    return "FRAUD" if prediction == 1 else "NORMAL", round(probability, 2)

# Contoh transaksi: [amount, hour, age, foreign, risk_country, vpn, prev_tx, balance]
new_tx = [12000, 23, 35, 1, 1, 1, 3, 400000]
status, prob = predict_fraud(new_tx)
print(f"Prediksi: {status}, Confidence: {prob}")



